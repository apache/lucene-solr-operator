/*
Copyright 2019 Bloomberg Finance LP.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/bloomberg/solr-operator/pkg/apis/solr/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SolrCloudLister helps list SolrClouds.
type SolrCloudLister interface {
	// List lists all SolrClouds in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.SolrCloud, err error)
	// SolrClouds returns an object that can list and get SolrClouds.
	SolrClouds(namespace string) SolrCloudNamespaceLister
	SolrCloudListerExpansion
}

// solrCloudLister implements the SolrCloudLister interface.
type solrCloudLister struct {
	indexer cache.Indexer
}

// NewSolrCloudLister returns a new SolrCloudLister.
func NewSolrCloudLister(indexer cache.Indexer) SolrCloudLister {
	return &solrCloudLister{indexer: indexer}
}

// List lists all SolrClouds in the indexer.
func (s *solrCloudLister) List(selector labels.Selector) (ret []*v1beta1.SolrCloud, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SolrCloud))
	})
	return ret, err
}

// SolrClouds returns an object that can list and get SolrClouds.
func (s *solrCloudLister) SolrClouds(namespace string) SolrCloudNamespaceLister {
	return solrCloudNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SolrCloudNamespaceLister helps list and get SolrClouds.
type SolrCloudNamespaceLister interface {
	// List lists all SolrClouds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.SolrCloud, err error)
	// Get retrieves the SolrCloud from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.SolrCloud, error)
	SolrCloudNamespaceListerExpansion
}

// solrCloudNamespaceLister implements the SolrCloudNamespaceLister
// interface.
type solrCloudNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SolrClouds in the indexer for a given namespace.
func (s solrCloudNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SolrCloud, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SolrCloud))
	})
	return ret, err
}

// Get retrieves the SolrCloud from the indexer for a given namespace and name.
func (s solrCloudNamespaceLister) Get(name string) (*v1beta1.SolrCloud, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("solrcloud"), name)
	}
	return obj.(*v1beta1.SolrCloud), nil
}
